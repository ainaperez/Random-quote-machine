{"version":3,"sources":["Components/Text/Text.module.css","Components/TweetQuote/TweetQuote.module.css","Components/NewQuote/NewQuote.module.css","QuoteBox/QuoteBox.module.css","Components/Text/Text.js","Components/Author/Author.js","Components/TweetQuote/TweetQuote.js","Components/NewQuote/NewQuote.js","QuoteBox/QuoteBox.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","text","props","id","className","classes","textDiv","quote","author","tweetQuote","href","link","target","twitterButton","title","newQuote","onClick","clicked","QuoteBox","state","quotes","newQuoteHandler","randomIndex","Math","floor","random","length","setState","colorChange","colors","randomColor","document","getElementById","animate","backgroundColor","duration","fill","axios","get","then","response","data","console","log","loadedQuote","this","twitter","encodeURIComponent","wrapper","quoteBox","Text","Author","buttons","TweetQuote","NewQuote","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,QAAU,wB,mBCA5BD,EAAOC,QAAU,CAAC,cAAgB,oC,mBCAlCD,EAAOC,QAAU,CAAC,SAAW,6B,4DCA7BD,EAAOC,QAAU,CAAC,QAAU,0BAA0B,QAAU,0BAA0B,SAAW,6B,mKCStFC,EAPF,SAACC,GAAD,OAET,mBAAGC,GAAG,OAAOC,UAAWC,IAAQC,QAAhC,SAA0CJ,EAAMK,SCGrCC,EANA,SAACN,GAAD,OAEX,oBAAGC,GAAG,SAAN,cAAiBD,EAAMM,W,iBCIZC,EAJI,SAACP,GAAD,OACf,mBAAGQ,KAAMR,EAAMS,KAAMR,GAAG,cAAcS,OAAO,QAASR,UAAWC,IAAQQ,cAAeC,MAAM,mBAA9F,SAAiH,mBAAGV,UAAU,qB,iBCEnHW,EAJE,SAACb,GAAD,OACb,wBAAQC,GAAG,YAAYC,UAAWC,IAAQU,SAAUC,QAASd,EAAMe,QAAnE,wB,gBCmFWC,E,4MA3EXC,MAAM,CACFC,OAAQ,KACRb,MAAO,M,EAiBXc,gBAAkB,WACd,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAS,EAAKN,MAAMC,OAAOM,OAAO,GAClE,EAAKC,SAAS,CAACpB,MAAO,EAAKY,MAAMC,OAAOE,KAE5C,EAAKM,e,EAITA,YAAc,WACV,IAAMC,EAAS,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEEC,EAAcD,EAAON,KAAKC,MAAMD,KAAKE,SAASI,EAAOH,SAE3DK,SAASC,eAAe,WAAWC,QAAQ,CAACC,gBAAkBJ,GAAc,CAACK,SAAU,IAAMC,KAAM,c,uDAnCvG,WAAoB,IAAD,OAEfC,IAAMC,IAAI,0IACTC,MAAK,SAAAC,GACH,EAAKb,SAAS,CAACP,OAAQoB,EAASC,KAAKrB,SACrCsB,QAAQC,IAAIH,GACX,IAAMlB,EAAcC,KAAKC,MAAMD,KAAKE,SAAS,EAAKN,MAAMC,OAAOM,OAAO,GACtE,EAAKC,SAAS,CAACpB,MAAO,EAAKY,MAAMC,OAAOE,KACxCoB,QAAQC,IAAI,EAAKxB,MAAMZ,Y,oBAgC/B,WAEI,IAAIqC,EAAc,2CAGlB,GAAwB,OAArBC,KAAK1B,MAAMZ,MAAe,CAEzB,IAAMuC,EAAU,iCAAkCC,mBAAmBF,KAAK1B,MAAMZ,MAAMA,MAAQ,MAAOsC,KAAK1B,MAAMZ,MAAMC,OAAS,OAEhIoC,EACC,qBAAKzC,GAAG,UAAUC,UAAWC,IAAQ2C,QAArC,SACI,sBAAK7C,GAAG,YAAYC,UAAWC,IAAQ4C,SAAvC,UACA,cAACC,EAAD,CAAM3C,MAAOsC,KAAK1B,MAAMZ,MAAMA,QAC9B,cAAC4C,EAAD,CAAQ3C,OAAQqC,KAAK1B,MAAMZ,MAAMC,SAC7B,sBAAKJ,UAAWC,IAAQ+C,QAAxB,UACI,cAACC,EAAD,CAAY1C,KAAMmC,IAClB,cAACQ,EAAD,CAAUrC,QAAS4B,KAAKxB,0BAOxC,OAAOuB,M,GAvEQW,aCGRC,MATf,WACE,OACE,qBAAKpD,UAAU,MAAf,SACE,cAAC,EAAD,OCKSqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASC,eAAe,SAM1ByB,M","file":"static/js/main.7daccc19.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textDiv\":\"Text_textDiv__1OjIY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterButton\":\"TweetQuote_twitterButton__1xpQK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newQuote\":\"NewQuote_newQuote__3Rq_a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"QuoteBox_wrapper__3XCZZ\",\"buttons\":\"QuoteBox_buttons__3DrDa\",\"quoteBox\":\"QuoteBox_quoteBox__2iGJv\"};","import React from 'react'; \nimport classes from './Text.module.css'\n\nconst text = (props) => (\n\n    <p id='text' className={classes.textDiv}>{props.quote}</p>\n               \n)\n\n\nexport default text; ","import React from 'react'; \n\nconst author = (props) => (\n    \n    <p id='author'>-{props.author}</p>\n    \n)\n\nexport default author;","import React from 'react'; \nimport classes from './TweetQuote.module.css'\n\n\nconst tweetQuote = (props) => (\n    <a href={props.link} id='tweet-quote' target='blank'  className={classes.twitterButton} title='Tweet this quote'><i className='fa fa-twitter'></i></a>\n)\n\nexport default tweetQuote;","import React from 'react'; \nimport classes from './NewQuote.module.css';\n\nconst newQuote = (props) => (\n    <button id='new-quote' className={classes.newQuote} onClick={props.clicked}>New quote</button>\n)\n\nexport default newQuote;","import React, {Component} from 'react';\nimport axios from 'axios'\n\nimport Text from '../Components/Text/Text';\nimport Author from '../Components/Author/Author';\nimport TweetQuote from '../Components/TweetQuote/TweetQuote';\nimport NewQuote from '../Components/NewQuote/NewQuote';\nimport classes from './QuoteBox.module.css'\n\n\nclass QuoteBox extends Component{\n\n    state={\n        quotes: null,\n        quote: null,\n       \n    }\n    \n    componentDidMount(){\n        \n        axios.get(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\")\n        .then(response => {\n           this.setState({quotes: response.data.quotes})  ; \n           console.log(response)\n            const randomIndex = Math.floor(Math.random()*this.state.quotes.length+1);\n            this.setState({quote: this.state.quotes[randomIndex]})\n            console.log(this.state.quote)\n\n        })\n    }\n\n    newQuoteHandler = () => {\n        const randomIndex = Math.floor(Math.random()*this.state.quotes.length+1);\n            this.setState({quote: this.state.quotes[randomIndex]})\n            \n        this.colorChange()\n\n    }\n\n    colorChange = () => {\n        const colors = [\n            '#c9e265', \n            '#a24936', \n            '#ffde59', \n            '#ffbe59',\n            '#5271ff',\n            '#8c52ff',\n            '#ff5757', \n            '#03989e', \n            '#cb6ce6', \n        ]; \n        const randomColor = colors[Math.floor(Math.random()*colors.length)];\n\n        document.getElementById('wrapper').animate({backgroundColor : randomColor}, {duration: 1000, fill: 'forwards'});\n        }\n\n    \n\n    render(){\n        \n        let loadedQuote = <p>Loading...</p>\n\n        \n        if(this.state.quote !== null){\n           \n            const twitter = 'twitter.com/intent/tweet?text='+ encodeURIComponent(this.state.quote.quote + \"-' \"+ this.state.quote.author + \" '.\")\n\n           loadedQuote= (\n            <div id='wrapper' className={classes.wrapper}>\n                <div id='quote-box' className={classes.quoteBox}>\n                <Text quote={this.state.quote.quote}/>\n                <Author author={this.state.quote.author}/>\n                    <div className={classes.buttons}>\n                        <TweetQuote link={twitter} />\n                        <NewQuote clicked={this.newQuoteHandler}/>\n                    </div>\n                </div>\n            </div>\n            )\n        }\n        \n        return loadedQuote;\n        \n    }\n \n};\n\nexport default QuoteBox;\n\n","\nimport './App.css';\nimport QuoteBox from '../src/QuoteBox/QuoteBox'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuoteBox />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}